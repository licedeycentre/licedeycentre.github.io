import js from '@eslint/js'
import typescript from '@typescript-eslint/eslint-plugin'
import typescriptParser from '@typescript-eslint/parser'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import prettier from 'eslint-plugin-prettier'
import prettierConfig from 'eslint-config-prettier'

export default [
  // Базовые правила ESLint
  js.configs.recommended,

  // Prettier конфигурация (отключает конфликтующие правила)
  prettierConfig,

  // Конфигурация для TypeScript файлов
  {
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      parser: typescriptParser,
      parserOptions: {
        ecmaVersion: 'latest',
        sourceType: 'module',
        ecmaFeatures: {
          jsx: true,
        },
      },
      globals: {
        // Браузерные глобальные переменные
        window: 'readonly',
        document: 'readonly',
        localStorage: 'readonly',
        sessionStorage: 'readonly',
        setTimeout: 'readonly',
        clearTimeout: 'readonly',
        setInterval: 'readonly',
        clearInterval: 'readonly',
        requestAnimationFrame: 'readonly',
        cancelAnimationFrame: 'readonly',
        fetch: 'readonly',
        console: 'readonly',
        // DOM типы
        HTMLElement: 'readonly',
        HTMLDivElement: 'readonly',
        HTMLLIElement: 'readonly',
        HTMLButtonElement: 'readonly',
        HTMLInputElement: 'readonly',
        HTMLFormElement: 'readonly',
        HTMLAnchorElement: 'readonly',
        HTMLImageElement: 'readonly',
        HTMLVideoElement: 'readonly',
        HTMLAudioElement: 'readonly',
        HTMLCanvasElement: 'readonly',
        HTMLSelectElement: 'readonly',
        HTMLTextAreaElement: 'readonly',
        HTMLTableElement: 'readonly',
        HTMLTableRowElement: 'readonly',
        HTMLTableCellElement: 'readonly',
        HTMLUListElement: 'readonly',
        HTMLOListElement: 'readonly',
        HTMLLIElement: 'readonly',
        HTMLParagraphElement: 'readonly',
        HTMLHeadingElement: 'readonly',
        HTMLSpanElement: 'readonly',
        HTMLStrongElement: 'readonly',
        HTMLEmElement: 'readonly',
        HTMLBRElement: 'readonly',
        HTMLHRElement: 'readonly',
        HTMLPreElement: 'readonly',
        HTMLCodeElement: 'readonly',
        HTMLQuoteElement: 'readonly',
        HTMLBlockquoteElement: 'readonly',
        HTMLDetailsElement: 'readonly',
        HTMLSummaryElement: 'readonly',
        HTMLDialogElement: 'readonly',
        HTMLMenuElement: 'readonly',
        HTMLMenuItemElement: 'readonly',
        HTMLDataElement: 'readonly',
        HTMLTimeElement: 'readonly',
        HTMLMarkElement: 'readonly',
        HTMLProgressElement: 'readonly',
        HTMLMeterElement: 'readonly',
        HTMLOutputElement: 'readonly',
        HTMLFieldSetElement: 'readonly',
        HTMLLegendElement: 'readonly',
        HTMLOptGroupElement: 'readonly',
        HTMLOptionElement: 'readonly',
        HTMLDataListElement: 'readonly',
        HTMLMapElement: 'readonly',
        HTMLAreaElement: 'readonly',
        HTMLObjectElement: 'readonly',
        HTMLParamElement: 'readonly',
        HTMLEmbedElement: 'readonly',
        HTMLSourceElement: 'readonly',
        HTMLTrackElement: 'readonly',
        HTMLMediaElement: 'readonly',
        HTMLIFrameElement: 'readonly',
        HTMLFrameElement: 'readonly',
        HTMLFrameSetElement: 'readonly',
        HTMLScriptElement: 'readonly',
        HTMLStyleElement: 'readonly',
        HTMLMetaElement: 'readonly',
        HTMLTitleElement: 'readonly',
        HTMLHeadElement: 'readonly',
        HTMLBodyElement: 'readonly',
        HTMLHtmlElement: 'readonly',
        HTMLFormElement: 'readonly',
        HTMLFieldSetElement: 'readonly',
        HTMLLegendElement: 'readonly',
        HTMLButtonElement: 'readonly',
        HTMLInputElement: 'readonly',
        HTMLTextAreaElement: 'readonly',
        HTMLSelectElement: 'readonly',
        HTMLOptGroupElement: 'readonly',
        HTMLOptionElement: 'readonly',
        HTMLDataListElement: 'readonly',
        HTMLOutputElement: 'readonly',
        HTMLProgressElement: 'readonly',
        HTMLMeterElement: 'readonly',
        HTMLDetailsElement: 'readonly',
        HTMLSummaryElement: 'readonly',
        HTMLDialogElement: 'readonly',
        HTMLMenuElement: 'readonly',
        HTMLMenuItemElement: 'readonly',
        HTMLDataElement: 'readonly',
        HTMLTimeElement: 'readonly',
        HTMLMarkElement: 'readonly',
        HTMLSpanElement: 'readonly',
        HTMLStrongElement: 'readonly',
        HTMLEmElement: 'readonly',
        HTMLBRElement: 'readonly',
        HTMLHRElement: 'readonly',
        HTMLPreElement: 'readonly',
        HTMLCodeElement: 'readonly',
        HTMLQuoteElement: 'readonly',
        HTMLBlockquoteElement: 'readonly',
        HTMLParagraphElement: 'readonly',
        HTMLHeadingElement: 'readonly',
        HTMLDivElement: 'readonly',
        HTMLSpanElement: 'readonly',
        HTMLAnchorElement: 'readonly',
        HTMLImageElement: 'readonly',
        HTMLVideoElement: 'readonly',
        HTMLAudioElement: 'readonly',
        HTMLCanvasElement: 'readonly',
        HTMLTableElement: 'readonly',
        HTMLTableRowElement: 'readonly',
        HTMLTableCellElement: 'readonly',
        HTMLUListElement: 'readonly',
        HTMLOListElement: 'readonly',
        HTMLLIElement: 'readonly',
        HTMLMapElement: 'readonly',
        HTMLAreaElement: 'readonly',
        HTMLObjectElement: 'readonly',
        HTMLParamElement: 'readonly',
        HTMLEmbedElement: 'readonly',
        HTMLSourceElement: 'readonly',
        HTMLTrackElement: 'readonly',
        HTMLIFrameElement: 'readonly',
        HTMLFrameElement: 'readonly',
        HTMLFrameSetElement: 'readonly',
        HTMLScriptElement: 'readonly',
        HTMLStyleElement: 'readonly',
        HTMLMetaElement: 'readonly',
        HTMLTitleElement: 'readonly',
        HTMLHeadElement: 'readonly',
        HTMLBodyElement: 'readonly',
        HTMLHtmlElement: 'readonly',
        // События
        Event: 'readonly',
        CustomEvent: 'readonly',
        KeyboardEvent: 'readonly',
        MouseEvent: 'readonly',
        TouchEvent: 'readonly',
        WheelEvent: 'readonly',
        FocusEvent: 'readonly',
        InputEvent: 'readonly',
        PopStateEvent: 'readonly',
        HashChangeEvent: 'readonly',
        PageTransitionEvent: 'readonly',
        BeforeUnloadEvent: 'readonly',
        UnloadEvent: 'readonly',
        LoadEvent: 'readonly',
        ErrorEvent: 'readonly',
        ProgressEvent: 'readonly',
        AnimationEvent: 'readonly',
        TransitionEvent: 'readonly',
        ClipboardEvent: 'readonly',
        DragEvent: 'readonly',
        PointerEvent: 'readonly',
        CompositionEvent: 'readonly',
        UIEvent: 'readonly',
        // React типы
        JSX: 'readonly',
        React: 'readonly',
        // Vitest типы
        vi: 'readonly',
        describe: 'readonly',
        it: 'readonly',
        expect: 'readonly',
        beforeEach: 'readonly',
        afterEach: 'readonly',
        beforeAll: 'readonly',
        afterAll: 'readonly',
      },
    },
    plugins: {
      '@typescript-eslint': typescript,
      react: react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
      prettier: prettier,
    },
    rules: {
      // TypeScript правила
      '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
      '@typescript-eslint/no-explicit-any': 'warn',
      '@typescript-eslint/no-var-requires': 'error',

      // React правила
      'react/react-in-jsx-scope': 'off', // Не нужно в React 17+
      'react/prop-types': 'off', // Используем TypeScript
      'react/jsx-uses-react': 'off', // Не нужно в React 17+
      'react/jsx-uses-vars': 'error',
      'react/jsx-key': 'error',
      'react/jsx-no-duplicate-props': 'error',
      'react/jsx-no-undef': 'error',
      'react/no-children-prop': 'error',
      'react/no-danger-with-children': 'error',
      'react/no-deprecated': 'error',
      'react/no-direct-mutation-state': 'error',
      'react/no-find-dom-node': 'error',
      'react/no-is-mounted': 'error',
      'react/no-render-return-value': 'error',
      'react/no-string-refs': 'error',
      'react/no-unescaped-entities': 'error',
      'react/no-unknown-property': 'error',
      'react/no-unsafe': 'error',
      'react/require-render-return': 'error',

      // React Hooks правила
      'react-hooks/rules-of-hooks': 'error',
      'react-hooks/exhaustive-deps': 'warn',

      // React Refresh правила (для Vite HMR)
      'react-refresh/only-export-components': ['warn', { allowConstantExport: true }],

      // Общие правила
      'no-console': 'warn',
      'no-debugger': 'error',
      'no-unused-vars': 'off', // Используем TypeScript версию
      'prefer-const': 'error',
      'no-var': 'error',
      eqeqeq: ['error', 'always'],
      curly: ['error', 'all'],
      'no-eval': 'error',
      'no-implied-eval': 'error',
      'no-new-func': 'error',
      'no-script-url': 'error',
      'no-self-compare': 'error',
      'no-throw-literal': 'error',
      'no-unmodified-loop-condition': 'error',
      'no-unused-expressions': 'error',
      'no-useless-call': 'error',
      'no-useless-concat': 'error',
      'no-useless-return': 'error',
      radix: 'error',
      yoda: 'error',

      // Prettier правила
      'prettier/prettier': 'error',
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
  },

  // Конфигурация для JavaScript файлов
  {
    files: ['**/*.{js,mjs}'],
    languageOptions: {
      ecmaVersion: 'latest',
      sourceType: 'module',
    },
    rules: {
      'no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
      'no-console': 'warn',
      'no-debugger': 'error',
      'prefer-const': 'error',
      'no-var': 'error',
    },
  },

  // Игнорирование файлов
  {
    ignores: [
      'node_modules/**',
      'dist/**',
      'public/**',
      '*.config.js',
      '*.config.ts',
      'scripts/**',
      '.vscode/**',
      '.git/**',
    ],
  },
]
